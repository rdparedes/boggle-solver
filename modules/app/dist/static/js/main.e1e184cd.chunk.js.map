{"version":3,"sources":["Board.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["Letter","_ref","text","row","col","onLetterChangeCallback","react_default","a","createElement","type","className","value","onChange","e","target","Board","_ref2","board","map","i","key","letter","j","Board_Letter","concat","Word","this","props","word","React","PureComponent","Results","results","words","Results_Word","App","state","isLoading","randomizeBoard","updatedBoard","_this","_","String","fromCharCode","Math","floor","random","setState","solveBoard","_callee","res","data","regenerator_default","wrap","_context","prev","next","fetch","method","body","JSON","stringify","headers","Content-Type","sent","json","updateResults","stop","onLetterChange","forceUpdate","_this$state","src_Board","flex","src_Results","onClick","disabled","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1e184cd.chunk.js","sourcesContent":["import React from 'react';\n\nconst Letter = ({ text, row, col, onLetterChangeCallback }) => (\n  <input\n    type=\"text\"\n    className=\"letter\"\n    value={text}\n    onChange={(e) => onLetterChangeCallback && onLetterChangeCallback(row, col, e.target.value)}\n  />\n);\n\nconst Board = ({ board, onLetterChangeCallback }) => (\n  <div className=\"board\">\n    {board &&\n      board.map((row, i) => (\n        <div key={i}>\n          {row.map((letter, j) => {\n            return (\n              <Letter\n                key={`${letter}-${j}`}\n                text={letter}\n                row={i}\n                col={j}\n                onLetterChangeCallback={onLetterChangeCallback}\n              />\n            );\n          })}\n        </div>\n      ))}\n  </div>\n);\n\nexport default Board;\n","import React from 'react';\n\nclass Word extends React.PureComponent {\n  render() {\n    const { value } = this.props.word;\n    return <span>{value}</span>;\n  }\n}\n\nconst Results = ({ results }) => (\n  <div className=\"results\">\n    <h3>Results</h3>\n    <div className=\"results-container\">\n      {results && results.words.map(word => <Word word={word} />)}\n    </div>\n  </div>\n);\n\nexport default Results;\n","import React from 'react';\nimport Board from './Board.js';\nimport Results from './Results.js';\nimport './App.css';\n\nclass App extends React.PureComponent {\n  state = {\n    board: [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']],\n    results: null,\n    isLoading: false\n  };\n\n  randomizeBoard = () => {\n    const { board } = this.state;\n    const updatedBoard = board.map(row =>\n      row.map(_ => String.fromCharCode(97 + Math.floor(Math.random() * 26)))\n    );\n    this.setState({\n      board: updatedBoard\n    });\n  };\n\n  solveBoard = async () => {\n    const { board } = this.state;\n    this.setState({ isLoading: true });\n    const res = await fetch('/find-words', {\n      method: 'POST',\n      body: JSON.stringify({\n        board: board\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = (await res.json()).data;\n    this.setState({ isLoading: false });\n\n    this.updateResults(data);\n  };\n\n  updateResults = results => {\n    this.setState({ results });\n  };\n\n  onLetterChange = (row, col, value) => {\n    const { board } = this.state;\n    board[row][col] = value;\n    this.setState({ board });\n    this.forceUpdate();\n  };\n\n  render() {\n    const { board, results, isLoading } = this.state;\n    return (\n      <div className=\"App\">\n        <h1>Boggle Solver</h1>\n        <div className=\"row\">\n          <Board flex=\"1\" board={board} onLetterChangeCallback={this.onLetterChange} />\n          <Results flex=\"1\" results={results} />\n        </div>\n        <button onClick={this.solveBoard} disabled={isLoading && 'disabled'}>\n          {isLoading ? 'Loading...' : 'Solve'}\n        </button>\n        <button onClick={this.randomizeBoard}>Randomize</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}